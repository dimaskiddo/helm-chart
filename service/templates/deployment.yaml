{{- if eq .Values.STATUS "present" }}
  {{- if .Values.SERVICE }}
    {{- if .Values.OPENSHIFT }}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
    {{- else }}
apiVersion: apps/v1
kind: Deployment
    {{- end }}
metadata:
  name: {{ .Values.SERVICE.NAME }}
  namespace: {{ .Values.NAMESPACE }}
  labels:
    app: {{ .Values.SERVICE.NAME }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  strategy:
  {{- if eq .Values.SERVICE.STRATEGY "rolling" }}
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  {{- else }}
    type: Recreate
  {{- end }}
  {{- if .Values.SERVICE.RESOURCE }}
    {{- if .Values.SERVICE.RESOURCE.REPLICAS }}
  replicas: {{ .Values.SERVICE.RESOURCE.REPLICAS }}
    {{- else }}
  replicas: 0
    {{- end }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.SERVICE.NAME }}
  template:
    metadata:
      labels:
        app: {{ .Values.SERVICE.NAME }}
        date: "{{ now | unixEpoch }}"  
    spec:
      containers:
      - name: {{ .Values.SERVICE.NAME }}
        image: {{ .Values.SERVICE.IMAGE.NAME }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.SERVICE.PORT }}
          protocol: TCP
        {{- if .Values.SERVICE.ENV }}
        envFrom:
        - secretRef:
            name: {{ .Values.SERVICE.NAME }}-env
        {{- end }}
        {{- if .Values.SERVICE.RESOURCE }}
        resources:
          {{- if .Values.SERVICE.RESOURCE.REQUEST }}
          requests:
            {{- if .Values.SERVICE.RESOURCE.REQUEST.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCE.REQUEST.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCE.REQUEST.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCE.REQUEST.MEMORY }}
            {{- end }}
          {{- else }}
          requests:
            {{- if .Values.SERVICE.RESOURCE.LIMIT.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCE.LIMIT.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCE.LIMIT.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCE.LIMIT.MEMORY }}
            {{- end }}
          {{- end }}
          {{- if .Values.SERVICE.RESOURCE.LIMIT }}
          limits:
            {{- if .Values.SERVICE.RESOURCE.LIMIT.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCE.LIMIT.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCE.LIMIT.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCE.LIMIT.MEMORY }}
            {{- end }}
          {{- end }}
        {{- end }}
        livenessProbe:
          initialDelaySeconds: 10
          tcpSocket:
            port: {{ .Values.SERVICE.PORT }}
          timeoutSeconds: 1
        readinessProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: {{ .Values.SERVICE.PORT }}
          timeoutSeconds: 1        
      dnsPolicy: ClusterFirst
      {{- if .Values.SERVICE.IMAGE }}
        {{- if .Values.SERVICE.IMAGE.SECRET }}
      imagePullSecrets:
       - name: {{ .Values.SERVICE.IMAGE.SECRET }}
        {{- end }}
      {{- end }}
      {{- if .Values.SERVICE.SELECTOR }}
      nodeSelector:
         node-role.kubernetes.io/worker: "{{ .Values.SERVICE.SELECTOR.NODE }}"
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
  {{- end }}
{{- else }}
# Delete Deployment
{{- end }}
